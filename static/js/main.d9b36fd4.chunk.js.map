{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-input/search-input.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","trash","name","src","id","CardList","monsters","map","SearchInput","placeholder","handle","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","Response","json","users","this","filteredMonsters","filter","clown","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,G,kBAAO,SAASC,GACzB,OACI,sBAAKC,UAAU,OAAf,UACI,6BAAKD,EAAME,MAAMC,OACjB,qBAAKC,IAAG,+BAA0BJ,EAAME,MAAMG,GAAtC,iCCHPC,EAAW,SAASN,GAC7B,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMO,SAASC,KAAI,SAAAN,GAAK,OAErB,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMG,UCNpBI,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,OAAhB,OACvB,uBAAOV,UAAU,eACbW,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCHG,E,kDArCb,aAAe,IAAD,8BACZ,gBAeJC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdnC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,gEAUI,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,+BAOhC,IAAD,EAC2BC,KAAKN,MAA9Bd,EADF,EACEA,SAAUW,EADZ,EACYA,YACXU,EAAmBrB,EAASsB,QAAO,SAAAC,GAAK,OAC5CA,EAAM3B,KAAK4B,cAAcC,SAASd,EAAYa,kBAChD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACES,YAAY,iBACZC,OAAQgB,KAAKZ,eAEf,cAAC,EAAD,CAAUR,SAAUqB,W,GAhCVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d9b36fd4.chunk.js","sourcesContent":["import React from 'react'\nimport './card.style.css'\n\nexport const Card = function(props) {\n    return(\n        <div className='card'>\n            <h1>{props.trash.name}</h1>\n            <img src={`https://robohash.org/${props.trash.id}?set=set2&size=180x180`}/>\n        </div>\n    )\n}","import React from 'react';\nimport './card-list.style.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = function(props) {\n    return(\n        <div className='card-list'>\n            {props.monsters.map(trash => (\n                \n                <Card key={trash.id} trash={trash}/>\n                \n            ))}\n        </div>\n    )\n }","import React from 'react';\nimport './search-input.style.css'\n\nexport const SearchInput = ({ placeholder, handle }) => (\n    <input className=\"search-input\" \n        type='search' \n        placeholder={placeholder}\n        onChange={handle}\n    />\n)","import './App.css';\nimport {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchInput} from './components/search-input/search-input.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n    \n  }\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(Response => Response.json())\n  .then(users => this.setState({monsters: users}));\n}\n\nhandleChange = (e) => {\n  this.setState({searchField: e.target.value})\n}\n\nrender() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(clown => \n      clown.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h2>Monsters-Rolodex</h2>\n        <SearchInput \n          placeholder='search monster' \n          handle={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}